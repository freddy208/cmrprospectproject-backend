generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

// --- MODÈLES NOUVEAUX ---

// NOUVEAU: Modèle pour les rôles (ex: Directeur Général)
model Role {
  id          String       @id @default(uuid())
  name        String       @unique // "DIRECTEUR_GENERAL", "COUNTRY_MANAGER", etc.
  description String?
  permissions Permission[] // Relation many-to-many avec Permission
  users       User[] // Relation one-to-many avec User
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// NOUVEAU: Modèle pour les permissions (ex: prospect:read)
model Permission {
  id          String   @id @default(uuid())
  name        String   @unique // "prospect:read", "user:create", etc.
  description String?
  roles       Role[] // Relation many-to-many avec Role
  createdAt   DateTime @default(now())
}

// --- MODÈLES MODIFIÉS ---

// MODIFIÉ: Le modèle User est maintenant lié au modèle Role
model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  password             String
  firstName            String?
  lastName             String
  // --- CHANGEMENTS ICI ---
  roleId               String // Clé étrangère vers le modèle Role
  role                 Role          @relation(fields: [roleId], references: [id])
  country              String?
  refreshToken         String?
  isActive             Boolean       @default(true)
  status               Status        @default(ACTIVE)
  lastLogin            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  comments             Comment[]
  createdFormations    Formation[]
  interactions         Interaction[]
  assignedProspects    Prospect[]    @relation("AssignedTo")
  createdProspects     Prospect[]    @relation("CreatedBy")
  createdSimulateurs   Simulateur[]

  @@index([email])
  @@index([roleId]) // Index sur la nouvelle clé étrangère
  @@index([country])
  @@index([status])
}

// --- MODÈLES EXISTANTS (NON MODIFIÉS) ---

model Prospect {
  id               String         @id @default(uuid())
  type             ProspectType
  email            String
  country          String
  phone            String
  whatsapp         String?
  leadChannel      LeadChannel
  serviceType      ServiceType
  status           ProspectStatus @default(NOUVEAU)
  genericStatus    Status         @default(ACTIVE)
  nextCallDate     DateTime?
  firstName        String?
  lastName         String?
  companyName      String?
  contactFirstName String?
  contactLastName  String?
  formationId      String?
  simulateurId     String?
  createdById      String
  assignedToId     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  convertedAt      DateTime?
  comments         Comment[]
  interactions     Interaction[]
  assignedTo       User?          @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy        User           @relation("CreatedBy", fields: [createdById], references: [id])
  formation        Formation?     @relation(fields: [formationId], references: [id])
  simulateur       Simulateur?    @relation(fields: [simulateurId], references: [id])

  @@index([type])
  @@index([status])
  @@index([country])
  @@index([assignedToId])
  @@index([createdById])
  @@index([email])
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  prospectId String
  userId     String
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  prospect   Prospect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([prospectId])
  @@index([userId])
  @@index([createdAt])
}

model Interaction {
  id         String       @id @default(uuid())
  prospectId String
  userId     String
  type       String?
  channel    LeadChannel?
  notes      String
  duration   Int?
  status     Status       @default(ACTIVE)
  createdAt  DateTime     @default(now())
  prospect   Prospect     @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id])

  @@index([prospectId])
  @@index([userId])
  @@index([createdAt])
}

model Formation {
  id          String     @id @default(uuid())
  name        String
  price       Float
  description String
  country     String
  createdById String
  status      Status     @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])
  prospects   Prospect[]

  @@index([name])
}

model Simulateur {
  id           String   @id @default(uuid())
  name         String
  monthlyPrice Float
  description  String
  country      String
  createdById  String
  status       Status   @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  prospects Prospect[]
  createdBy User       @relation(fields: [createdById], references: [id])

  @@index([name])
}

// --- ENUMS (NON MODIFIÉS) ---
// NOTE: L'enum UserRole n'est plus utilisé directement dans la base de données,
// mais il peut être utile de le garder dans votre code TypeScript pour la clarté.

enum UserRole {
  DIRECTEUR_GENERAL
  COUNTRY_MANAGER
  SALES_OFFICER
}

enum ProspectType {
  PARTICULIER
  ENTREPRISE
}

enum ProspectStatus {
  NOUVEAU
  QUALIFIE
  CONVERTI
  PAS_SERIEUX
  PERDU
}

enum ServiceType {
  SIMULATEUR
  FORMATION
}

enum LeadChannel {
  WHATSAPP
  EMAIL
  SITE_INTERNET
  VISITE_BUREAU
  VISITE_TERRAIN
  RECOMMANDATION
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}
